-- Personal Finance Dashboard Database Schema
-- Creating comprehensive schema for personal finance tracking with AI insights

-- Types and Enums
CREATE TYPE public.transaction_type AS ENUM ('income', 'expense');
CREATE TYPE public.account_type AS ENUM ('checking', 'savings', 'credit_card', 'investment', 'cash');
CREATE TYPE public.recurring_frequency AS ENUM ('none', 'daily', 'weekly', 'monthly', 'quarterly', 'yearly');
CREATE TYPE public.goal_type AS ENUM ('savings', 'debt_payoff', 'investment', 'emergency_fund');

-- User profiles for authentication
CREATE TABLE public.user_profiles (
    id UUID PRIMARY KEY REFERENCES auth.users(id),
    email TEXT NOT NULL UNIQUE,
    full_name TEXT NOT NULL,
    profile_picture TEXT,
    currency TEXT DEFAULT 'USD',
    timezone TEXT DEFAULT 'UTC',
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Financial accounts (bank accounts, credit cards, etc.)
CREATE TABLE public.accounts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES public.user_profiles(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    account_type public.account_type NOT NULL,
    balance DECIMAL(15,2) DEFAULT 0,
    institution TEXT,
    account_number_last4 TEXT,
    is_active BOOLEAN DEFAULT true,
    plaid_account_id TEXT,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Categories for transactions
CREATE TABLE public.categories (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES public.user_profiles(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    icon TEXT DEFAULT '📁',
    color TEXT DEFAULT '#3B82F6',
    transaction_type public.transaction_type NOT NULL,
    is_default BOOLEAN DEFAULT false,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Transactions
CREATE TABLE public.transactions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES public.user_profiles(id) ON DELETE CASCADE,
    account_id UUID REFERENCES public.accounts(id) ON DELETE CASCADE,
    category_id UUID REFERENCES public.categories(id) ON DELETE SET NULL,
    amount DECIMAL(15,2) NOT NULL,
    description TEXT NOT NULL,
    transaction_type public.transaction_type NOT NULL,
    transaction_date DATE NOT NULL DEFAULT CURRENT_DATE,
    is_recurring BOOLEAN DEFAULT false,
    recurring_frequency public.recurring_frequency DEFAULT 'none',
    next_occurrence DATE,
    receipt_url TEXT,
    notes TEXT,
    plaid_transaction_id TEXT,
    merchant_name TEXT,
    location TEXT,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Budgets
CREATE TABLE public.budgets (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES public.user_profiles(id) ON DELETE CASCADE,
    category_id UUID REFERENCES public.categories(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    amount DECIMAL(15,2) NOT NULL,
    period_start DATE NOT NULL,
    period_end DATE NOT NULL,
    spent_amount DECIMAL(15,2) DEFAULT 0,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Financial goals
CREATE TABLE public.financial_goals (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES public.user_profiles(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    description TEXT,
    goal_type public.goal_type NOT NULL,
    target_amount DECIMAL(15,2) NOT NULL,
    current_amount DECIMAL(15,2) DEFAULT 0,
    target_date DATE,
    is_achieved BOOLEAN DEFAULT false,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- AI insights generated by Gemini
CREATE TABLE public.ai_insights (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES public.user_profiles(id) ON DELETE CASCADE,
    insight_type TEXT NOT NULL, -- 'spending_pattern', 'savings_opportunity', 'budget_alert', etc.
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    data JSONB,
    priority TEXT DEFAULT 'medium', -- 'low', 'medium', 'high'
    is_read BOOLEAN DEFAULT false,
    expires_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Bank connections (for Plaid integration)
CREATE TABLE public.bank_connections (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES public.user_profiles(id) ON DELETE CASCADE,
    institution_name TEXT NOT NULL,
    plaid_item_id TEXT UNIQUE,
    access_token TEXT NOT NULL,
    is_active BOOLEAN DEFAULT true,
    last_sync_at TIMESTAMPTZ,
    sync_error TEXT,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Essential Indexes
CREATE INDEX idx_user_profiles_email ON public.user_profiles(email);
CREATE INDEX idx_accounts_user_id ON public.accounts(user_id);
CREATE INDEX idx_transactions_user_id ON public.transactions(user_id);
CREATE INDEX idx_transactions_date ON public.transactions(transaction_date DESC);
CREATE INDEX idx_transactions_account_id ON public.transactions(account_id);
CREATE INDEX idx_transactions_category_id ON public.transactions(category_id);
CREATE INDEX idx_categories_user_id ON public.categories(user_id);
CREATE INDEX idx_budgets_user_id ON public.budgets(user_id);
CREATE INDEX idx_financial_goals_user_id ON public.financial_goals(user_id);
CREATE INDEX idx_ai_insights_user_id ON public.ai_insights(user_id);
CREATE INDEX idx_ai_insights_created_at ON public.ai_insights(created_at DESC);
CREATE INDEX idx_bank_connections_user_id ON public.bank_connections(user_id);

-- Enable RLS
ALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.accounts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.transactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.budgets ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.financial_goals ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ai_insights ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.bank_connections ENABLE ROW LEVEL SECURITY;

-- RLS Policies - Pattern 1: Core user table
CREATE POLICY "users_manage_own_user_profiles"
ON public.user_profiles
FOR ALL
TO authenticated
USING (id = auth.uid())
WITH CHECK (id = auth.uid());

-- RLS Policies - Pattern 2: Simple user ownership
CREATE POLICY "users_manage_own_accounts"
ON public.accounts
FOR ALL
TO authenticated
USING (user_id = auth.uid())
WITH CHECK (user_id = auth.uid());

CREATE POLICY "users_manage_own_categories"
ON public.categories
FOR ALL
TO authenticated
USING (user_id = auth.uid())
WITH CHECK (user_id = auth.uid());

CREATE POLICY "users_manage_own_transactions"
ON public.transactions
FOR ALL
TO authenticated
USING (user_id = auth.uid())
WITH CHECK (user_id = auth.uid());

CREATE POLICY "users_manage_own_budgets"
ON public.budgets
FOR ALL
TO authenticated
USING (user_id = auth.uid())
WITH CHECK (user_id = auth.uid());

CREATE POLICY "users_manage_own_financial_goals"
ON public.financial_goals
FOR ALL
TO authenticated
USING (user_id = auth.uid())
WITH CHECK (user_id = auth.uid());

CREATE POLICY "users_manage_own_ai_insights"
ON public.ai_insights
FOR ALL
TO authenticated
USING (user_id = auth.uid())
WITH CHECK (user_id = auth.uid());

CREATE POLICY "users_manage_own_bank_connections"
ON public.bank_connections
FOR ALL
TO authenticated
USING (user_id = auth.uid())
WITH CHECK (user_id = auth.uid());

-- Automatic profile creation function
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
SECURITY DEFINER
LANGUAGE plpgsql
AS $$
BEGIN
  INSERT INTO public.user_profiles (id, email, full_name)
  VALUES (
    NEW.id, 
    NEW.email, 
    COALESCE(NEW.raw_user_meta_data->>'full_name', split_part(NEW.email, '@', 1))
  );
  RETURN NEW;
END;
$$;

-- Trigger for new user creation
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- Function to update account balance after transaction
CREATE OR REPLACE FUNCTION public.update_account_balance()
RETURNS TRIGGER
SECURITY DEFINER
LANGUAGE plpgsql
AS $$
BEGIN
  -- Update account balance
  IF TG_OP = 'INSERT' THEN
    UPDATE public.accounts 
    SET balance = balance + 
      CASE 
        WHEN NEW.transaction_type = 'income' THEN NEW.amount
        ELSE -NEW.amount
      END,
      updated_at = CURRENT_TIMESTAMP
    WHERE id = NEW.account_id;
    RETURN NEW;
  ELSIF TG_OP = 'UPDATE' THEN
    -- Reverse old transaction
    UPDATE public.accounts 
    SET balance = balance - 
      CASE 
        WHEN OLD.transaction_type = 'income' THEN OLD.amount
        ELSE -OLD.amount
      END
    WHERE id = OLD.account_id;
    
    -- Apply new transaction
    UPDATE public.accounts 
    SET balance = balance + 
      CASE 
        WHEN NEW.transaction_type = 'income' THEN NEW.amount
        ELSE -NEW.amount
      END,
      updated_at = CURRENT_TIMESTAMP
    WHERE id = NEW.account_id;
    RETURN NEW;
  ELSIF TG_OP = 'DELETE' THEN
    -- Reverse transaction
    UPDATE public.accounts 
    SET balance = balance - 
      CASE 
        WHEN OLD.transaction_type = 'income' THEN OLD.amount
        ELSE -OLD.amount
      END,
      updated_at = CURRENT_TIMESTAMP
    WHERE id = OLD.account_id;
    RETURN OLD;
  END IF;
  
  RETURN NULL;
END;
$$;

-- Trigger to update account balance
CREATE TRIGGER update_account_balance_trigger
  AFTER INSERT OR UPDATE OR DELETE ON public.transactions
  FOR EACH ROW EXECUTE FUNCTION public.update_account_balance();

-- Function to calculate net worth
CREATE OR REPLACE FUNCTION public.calculate_net_worth(user_uuid UUID)
RETURNS DECIMAL(15,2)
SECURITY DEFINER
LANGUAGE plpgsql
AS $$
DECLARE
  total_assets DECIMAL(15,2) := 0;
  total_liabilities DECIMAL(15,2) := 0;
BEGIN
  -- Calculate total assets (positive balances)
  SELECT COALESCE(SUM(balance), 0) INTO total_assets
  FROM public.accounts
  WHERE user_id = user_uuid 
    AND account_type IN ('checking', 'savings', 'investment', 'cash')
    AND balance > 0;
    
  -- Calculate total liabilities (negative balances and credit card debts)
  SELECT COALESCE(SUM(ABS(balance)), 0) INTO total_liabilities
  FROM public.accounts
  WHERE user_id = user_uuid 
    AND (account_type = 'credit_card' OR balance < 0);
    
  RETURN total_assets - total_liabilities;
END;
$$;

-- Mock Data
DO $$
DECLARE
    demo_user_id UUID := gen_random_uuid();
    checking_account_id UUID := gen_random_uuid();
    savings_account_id UUID := gen_random_uuid();
    credit_card_id UUID := gen_random_uuid();
    food_category_id UUID := gen_random_uuid();
    transport_category_id UUID := gen_random_uuid();
    salary_category_id UUID := gen_random_uuid();
    entertainment_category_id UUID := gen_random_uuid();
BEGIN
    -- Create demo auth user
    INSERT INTO auth.users (
        id, instance_id, aud, role, email, encrypted_password, email_confirmed_at,
        created_at, updated_at, raw_user_meta_data, raw_app_meta_data,
        is_sso_user, is_anonymous, confirmation_token, confirmation_sent_at,
        recovery_token, recovery_sent_at, email_change_token_new, email_change,
        email_change_sent_at, email_change_token_current, email_change_confirm_status,
        reauthentication_token, reauthentication_sent_at, phone, phone_change,
        phone_change_token, phone_change_sent_at
    ) VALUES
        (demo_user_id, '00000000-0000-0000-0000-000000000000', 'authenticated', 'authenticated',
         'demo@financetracker.com', crypt('demopass123', gen_salt('bf', 10)), now(), now(), now(),
         '{"full_name": "Demo User"}'::jsonb, '{"provider": "email", "providers": ["email"]}'::jsonb,
         false, false, '', null, '', null, '', '', null, '', 0, '', null, null, '', '', null);

    -- Create demo accounts
    INSERT INTO public.accounts (id, user_id, name, account_type, balance, institution, account_number_last4) VALUES
        (checking_account_id, demo_user_id, 'Main Checking', 'checking', 5420.50, 'Chase Bank', '1234'),
        (savings_account_id, demo_user_id, 'Emergency Fund', 'savings', 15800.00, 'Chase Bank', '5678'),
        (credit_card_id, demo_user_id, 'Chase Freedom', 'credit_card', -1240.80, 'Chase Bank', '9012');

    -- Create demo categories
    INSERT INTO public.categories (id, user_id, name, icon, color, transaction_type, is_default) VALUES
        (food_category_id, demo_user_id, 'Food & Dining', '🍽️', '#EF4444', 'expense', true),
        (transport_category_id, demo_user_id, 'Transportation', '🚗', '#3B82F6', 'expense', true),
        (salary_category_id, demo_user_id, 'Salary', '💼', '#10B981', 'income', true),
        (entertainment_category_id, demo_user_id, 'Entertainment', '🎬', '#8B5CF6', 'expense', true);

    -- Create demo transactions
    INSERT INTO public.transactions (user_id, account_id, category_id, amount, description, transaction_type, transaction_date, merchant_name) VALUES
        (demo_user_id, checking_account_id, salary_category_id, 4500.00, 'Monthly Salary', 'income', CURRENT_DATE - INTERVAL '1 day', 'TechCorp Inc'),
        (demo_user_id, checking_account_id, food_category_id, 45.60, 'Grocery Shopping', 'expense', CURRENT_DATE - INTERVAL '2 days', 'Whole Foods'),
        (demo_user_id, credit_card_id, entertainment_category_id, 89.99, 'Movie Theater', 'expense', CURRENT_DATE - INTERVAL '3 days', 'AMC Theaters'),
        (demo_user_id, checking_account_id, transport_category_id, 35.20, 'Gas Station', 'expense', CURRENT_DATE - INTERVAL '4 days', 'Shell'),
        (demo_user_id, checking_account_id, food_category_id, 28.50, 'Restaurant Lunch', 'expense', CURRENT_DATE - INTERVAL '5 days', 'Local Bistro'),
        (demo_user_id, savings_account_id, salary_category_id, 800.00, 'Monthly Savings Transfer', 'income', CURRENT_DATE - INTERVAL '1 day', 'Transfer'),
        (demo_user_id, checking_account_id, food_category_id, 120.35, 'Weekly Groceries', 'expense', CURRENT_DATE - INTERVAL '7 days', 'Safeway');

    -- Create demo budgets
    INSERT INTO public.budgets (user_id, category_id, name, amount, period_start, period_end, spent_amount) VALUES
        (demo_user_id, food_category_id, 'Monthly Food Budget', 500.00, DATE_TRUNC('month', CURRENT_DATE), DATE_TRUNC('month', CURRENT_DATE) + INTERVAL '1 month' - INTERVAL '1 day', 194.45),
        (demo_user_id, entertainment_category_id, 'Monthly Entertainment', 200.00, DATE_TRUNC('month', CURRENT_DATE), DATE_TRUNC('month', CURRENT_DATE) + INTERVAL '1 month' - INTERVAL '1 day', 89.99),
        (demo_user_id, transport_category_id, 'Monthly Transportation', 300.00, DATE_TRUNC('month', CURRENT_DATE), DATE_TRUNC('month', CURRENT_DATE) + INTERVAL '1 month' - INTERVAL '1 day', 35.20);

    -- Create demo financial goals
    INSERT INTO public.financial_goals (user_id, name, description, goal_type, target_amount, current_amount, target_date) VALUES
        (demo_user_id, 'Emergency Fund', 'Build 6 months of expenses', 'emergency_fund', 20000.00, 15800.00, CURRENT_DATE + INTERVAL '6 months'),
        (demo_user_id, 'Vacation Fund', 'Save for Europe trip', 'savings', 5000.00, 1200.00, CURRENT_DATE + INTERVAL '8 months'),
        (demo_user_id, 'Investment Portfolio', 'Build retirement savings', 'investment', 50000.00, 8500.00, CURRENT_DATE + INTERVAL '2 years');

    -- Create demo AI insights
    INSERT INTO public.ai_insights (user_id, insight_type, title, description, priority) VALUES
        (demo_user_id, 'spending_pattern', 'Dining Out Trend', 'Your restaurant spending has increased 15% this month compared to last month. Consider cooking more meals at home to save money.', 'medium'),
        (demo_user_id, 'savings_opportunity', 'Subscription Optimization', 'You have multiple streaming services. Canceling 2 unused subscriptions could save you $25/month.', 'low'),
        (demo_user_id, 'budget_alert', 'Food Budget Alert', 'You have spent 78% of your monthly food budget with 12 days remaining this month.', 'high');

EXCEPTION
    WHEN foreign_key_violation THEN
        RAISE NOTICE 'Foreign key error: %', SQLERRM;
    WHEN unique_violation THEN
        RAISE NOTICE 'Unique constraint error: %', SQLERRM;
    WHEN OTHERS THEN
        RAISE NOTICE 'Unexpected error: %', SQLERRM;
END $$;